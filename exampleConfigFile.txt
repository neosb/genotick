########################################################################################
########################	Example config file   ##################################
####################### Lines starting at # are ignored ################################
########################################################################################


# This is a directory (relative to your current directory) where data files are stored.
dataDirectory data

# Time at which Genotick should start its simulation / training
# Leave commented out to enable start when data start
startTimePoint	20000101

# End time of simulation / training. Same as above - comment out to
# end when data ends
endTimePoint	20150101

# Two possible options: RAM and FileSystem. Use RAM to keep population in... (guess!). 
# Use “FileSystem” to keep population in files (they will be stored in directory “population” 
# relative to your current directory. FileSystem is much slower but will allow for large population.
populationDAO	FileSystem

# false or true. If false Genotick will do full training. If true, only prediction is given. 
# No training or updating population / programs' weight.
executionOnly	false

# Desired size for the population. Should be in thousands at least to get satisfactory results. 
# The more the merrier.
populationDesiredSize	1000

# This setting prevents programs (systems) to run forever. Given number is used to calculate 
# maximum instructions that can be executed for a program on each TimePoint for each data file. 
# Currently algorithm is simply: processorInstructionLimit * programLength
processorInstructionLimit	256

# This setting is used to calculate how many programs is considered to be killed based on their age.
maximumDeathByAge	0.01

# This setting is used to calculate how many programs is considered to be killed based on their weight.
maximumDeathByWeight	0.01

# Probability of killing program because it's too old.
probabilityOfDeathByAge	0.5

# Probability of a program getting killed because its weight is too close to 0. 
# Currently, killing by weight happens only if there is no more space to breed in population.
probabilityOfDeathByWeight	0.5

# When a child is born is weight is zero because it has no predictions. 
# This setting enables setting child's weight as percentage (in range 0.. 1) of its parents' average weight. 
# This is done to protect young programs from getting killed when they had few predictions.
inheritedChildWeight	0

# This is how far into the past a program can read data. Set it to something reasonable, depending on your time frame.
dataMaximumOffset	256

# This is how long for a program is protected (i.e. cannot be killed). 
# Number of outcomes increments by one for every data on every time point.
protectProgramUntilOutcomes	100

# Probability of new instruction when making a child.
newInstructionProbability	0.01

# Probability of mutating existing instruction when making a child.
instructionMutationProbability	0.01

# Probability of skipping an instruction when making a child. Better set it very close to newInstructionProbability, 
# otherwise programs will either shrink (i.e. become useless) or grow uncontrollably (will execute forever).
skipInstructionProbability	0.01

# This settings is used to decide when a program can have a child for the first time.
minimumOutcomesToAllowBreeding	50

# This setting is used to decide how soon a program can have a child after previous child.
minimumOutcomesBetweenBreeding	50

# If set to true programs that make no prediction will be removed immediately. Even if they protected by protectUntilOutcomes.
killNonPredictingPrograms	true

# Number of totally new and random programs to be added at each time point (as a fraction of PopulationDesiredSize). 
# Even if population is full.
randomProgramsAtEachUpdate	0.02

# Elitism. Number of best programs to protect (as a fraction of PopulationDesiredSize). 
# Even if they old and smell funny, as long as they useful.
protectBestPrograms	0.02

# Should be used only if every data file has its reversed equivalent. 
# If set to true and a number of UP and DOWN predictions is not the same – it gets removed immediately. 
# Even if it's protected.
requireSymmetricalPrograms	true

# This prevents Genotick from trading if Long votes are too close to Short votes.
# Majority weight is divided by this number and still has to be bigger than minority.
# By default this is set to 1, so even small difference can tilt the scale.
# For example setting this number to 2 means that majority weight has to be at least 2 times bigger
# than minority. Numbers below 1 make no sense.
resultThreshold 1

